{"version":3,"file":"static/js/575.1dfb69a0.chunk.js","mappings":"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","sources":["components/auth/Register/Register.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useAuthState } from \"react-firebase-hooks/auth\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n    auth,\r\n} from \"../../../firebase_setup/firebase\";\r\nimport { useInput } from \"../../../hooks/useInput\";\r\nimport { registerWithEmail, registerWithGoogle } from \"../../../services/authService\";\r\nimport validationFunctions from \"../../../utils/validationFunctions/validationFunctions\";\r\n\r\nconst Register = () => {\r\n    const [user, loading] = useAuthState(auth);\r\n    const navigate = useNavigate();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n\r\n    const email = useInput(validationFunctions.emailIsValid);\r\n    const name = useInput(validationFunctions.nameIsLength);\r\n    const password = useInput(validationFunctions.passwordIsLength);\r\n    const repeatPassword = useInput(validationFunctions.isEqual.bind(null, password.value));\r\n\r\n    const formIsValid =\r\n        email.fieldIsValid\r\n        && password.fieldIsValid\r\n        && password.fieldIsValid\r\n        && repeatPassword.fieldIsValid;\r\n\r\n\r\n\r\n\r\n    const onRegisterHandler = async (e) => {\r\n        e.preventDefault();\r\n        if (formIsValid) {\r\n            setIsLoading(true);\r\n            try {\r\n                await registerWithEmail(name.value, email.value, password.value);\r\n                navigate('/');\r\n                toast.success(`Welcome, ${name.value}`);\r\n            } catch (err){\r\n                password.fieldReset();\r\n                repeatPassword.fieldReset();\r\n                toast.error('Email is already taken!');\r\n            }\r\n        }\r\n        setIsLoading(false);\r\n    };\r\n\r\n    const onGoogleRegisterHandler = () => {\r\n        registerWithGoogle();\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        if (loading) {\r\n            return;\r\n        }\r\n    }, [user, loading]);\r\n    return (\r\n        <section className=\"form-section auth\">\r\n            <div className=\"login__container\">\r\n                <form className=\"form\" onSubmit={onRegisterHandler}>\r\n                    <h2 className={'heading'}>Register</h2>\r\n                    <div className={'input-box'}>\r\n                        {/* <label className={'label'} htmlFor=\"email\">Email</label> */}\r\n                        {email.hasError && <p className={'alert'}>Email must be valid!</p>}\r\n                        <input\r\n                            type=\"text\"\r\n                            className={`input ${email.hasError && 'input-alert'}`}\r\n                            value={email.value}\r\n                            onChange={email.onChange}\r\n                            onBlur={email.onBlur}\r\n                            placeholder=\"E-mail Address\"\r\n                            id=\"email\"\r\n                        />\r\n                    </div>\r\n                    <div className={'input-box'}>\r\n                        {/* <label className={'label'} htmlFor=\"password\">Password</label> */}\r\n                        {name.hasError && <p className={'alert'}>Full name must be at least 5 characters long!</p>}\r\n\r\n                        <input\r\n                            type=\"text\"\r\n                            className={`input ${name.hasError ? 'input-alert' : ''}`}\r\n                            value={name.value}\r\n                            onChange={name.onChange}\r\n                            onBlur={name.onBlur}\r\n                            placeholder=\"Full Name\"\r\n                            id=\"name\"\r\n                        />\r\n                    </div>\r\n                    <div className={'input-box'}>\r\n                        {/* <label className={'label'} htmlFor=\"password\">Password</label> */}\r\n                        {password.hasError && <p className={'alert'}>Password must be at least 6 characters long!</p>}\r\n\r\n                        <input\r\n                            type=\"password\"\r\n                            className={`input ${password.hasError ? 'input-alert' : ''}`}\r\n                            value={password.value}\r\n                            onChange={password.onChange}\r\n                            onBlur={password.onBlur}\r\n                            placeholder=\"Password\"\r\n                            id=\"password\"\r\n                        />\r\n                    </div>\r\n                    <div className={'input-box'}>\r\n                        {/* <label className={'label'} htmlFor=\"password\">Password</label> */}\r\n                        {repeatPassword.hasError && <p className={'alert'}>Passwords don't match!</p>}\r\n\r\n                        <input\r\n                            type=\"password\"\r\n                            className={`input ${repeatPassword.hasError ? 'input-alert' : ''}`}\r\n                            value={repeatPassword.value}\r\n                            onChange={repeatPassword.onChange}\r\n                            onBlur={repeatPassword.onBlur}\r\n                            placeholder=\"Repeat Password\"\r\n                            id=\"repeatPassword\"\r\n                        />\r\n                    </div>\r\n                    <button\r\n                        disabled={!formIsValid || isLoading}\r\n                        className=\"btn action-btn\"\r\n                    >\r\n                        Register\r\n                    </button>\r\n                </form>\r\n                <button className={`btn google-btn action-btn`} onClick={onGoogleRegisterHandler}>\r\n                    Register with Google\r\n                </button>\r\n                <div className=\"link anchor\">\r\n                    Already have an account? <Link className=\"link\" to=\"/login\">Login</Link> now.\r\n                </div>\r\n            </div>\r\n\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n"],"names":["_useAuthState","useAuthState","auth","_useAuthState2","_slicedToArray","user","loading","navigate","useNavigate","_useState","useState","_useState2","isLoading","setIsLoading","email","useInput","validationFunctions","name","password","repeatPassword","value","formIsValid","fieldIsValid","onRegisterHandler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","wrap","_context","prev","next","preventDefault","registerWithEmail","toast","concat","t0","fieldReset","stop","_x","apply","arguments","useEffect","_jsx","className","children","_jsxs","onSubmit","hasError","type","onChange","onBlur","placeholder","id","disabled","onClick","registerWithGoogle","Link","to"],"sourceRoot":""}