{"ast":null,"code":"import { addDoc, collection, getDocs, orderBy, query, serverTimestamp, arrayUnion, doc, getDoc, updateDoc, arrayRemove, setDoc, FieldValue, increment, deleteField } from \"firebase/firestore\";\nimport { firestore } from \"../firebase_setup/firebase\";\nconst movieCollection = collection(firestore, \"movies\");\nconst seriesCollection = collection(firestore, \"series\");\nexport const addNewShow = async (type, showData) => {\n  let collectionType = type === 'Movie' ? movieCollection : seriesCollection;\n  try {\n    await addDoc(collectionType, {\n      ...showData,\n      rating: {\n        ratingPoints: 0,\n        usersRated: []\n      },\n      createdAt: serverTimestamp()\n    });\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nexport const editShow = async (type, showId, showData) => {\n  let showType = '';\n  if (type === 'Movie') {\n    showType = 'movies';\n  } else if (type === 'Series') {\n    showType = 'series';\n  }\n  const currentShowRef = doc(firestore, showType, showId);\n  try {\n    const result = await updateDoc(currentShowRef, {\n      ...showData\n    }, {\n      merge: true\n    });\n    console.log(result);\n    return result;\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nexport const getAll = async type => {\n  let collectionType = type === 'Movie' ? movieCollection : seriesCollection;\n  const orderedQuery = query(collectionType, orderBy('createdAt', 'desc'));\n  try {\n    const result = await getDocs(orderedQuery).then(docs => {\n      let arr = [];\n      docs.forEach(doc => {\n        let fields = doc.data();\n        arr.push({\n          id: doc.id,\n          fields: fields\n        });\n      });\n      return arr;\n    });\n    // console.log(result);\n    return result;\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nexport const getOne = async (showId, type) => {\n  let showType = '';\n  if (type === 'Movie') {\n    showType = 'movies';\n  } else if (type === 'Series') {\n    showType = 'series';\n  }\n  const showRef = doc(firestore, showType, showId);\n  try {\n    const result = await getDoc(showRef);\n    const id = result.id;\n    const fields = result.data();\n    return {\n      id,\n      fields\n    };\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nexport const addToWishList = async (type, userId, showId) => {\n  const currentUserRef = doc(firestore, 'users', userId);\n  await updateDoc(currentUserRef, {\n    watchlist: arrayUnion({\n      showId,\n      type\n    })\n  });\n};\nexport const removeFromWatchlist = async (type, userId, showId) => {\n  const currentUserRef = doc(firestore, 'users', userId);\n  await updateDoc(currentUserRef, {\n    watchlist: arrayRemove({\n      showId,\n      type\n    })\n  });\n};\nexport const getAllFromWatchlist = async userId => {\n  const currentUserRef = collection(firestore, 'users');\n  try {\n    const result = await getDoc(doc(currentUserRef, userId));\n    // .then(doc => doc.data().watchlist);\n    const userWatchlist = result.data().watchlist;\n    return userWatchlist;\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nexport const handleRating = async (action, type, userId, showId, ratePoints, usersRatedCount, oldRatingPoints, userHasRated, currentUserRating) => {\n  let showType = '';\n  if (type === 'Movie') {\n    showType = 'movies';\n  } else if (type === 'Series') {\n    showType = 'series';\n  }\n  const currentShowRef = doc(firestore, showType, showId);\n  // const result = await getDoc(currentShowRef);\n  // const fields = result.data();\n  // const oldRatingPoints = fields.rating.ratingPoints;\n  // let usersRatedCount = Object.keys(fields.rating.usersRated).length;\n  // const currentUserRating = fields.rating.usersRated[userId];\n  let newRatingPoints = 0;\n  if (action === 'send') {\n    if (userHasRated) {\n      newRatingPoints = (oldRatingPoints * usersRatedCount - currentUserRating + ratePoints) / usersRatedCount;\n    } else {\n      newRatingPoints = (oldRatingPoints * usersRatedCount + ratePoints) / (usersRatedCount + 1);\n      usersRatedCount++;\n    }\n    await setDoc(currentShowRef, {\n      rating: {\n        usersRated: {\n          [userId]: ratePoints\n        },\n        ratingPoints: newRatingPoints\n      }\n    }, {\n      merge: true\n    });\n  } else if (action === 'remove') {\n    console.log(newRatingPoints);\n    newRatingPoints = (oldRatingPoints * usersRatedCount - currentUserRating) / (usersRatedCount - 1) || 0;\n    usersRatedCount--;\n    await setDoc(currentShowRef, {\n      rating: {\n        usersRated: {\n          [userId]: deleteField()\n        },\n        ratingPoints: newRatingPoints\n      }\n    }, {\n      merge: true\n    });\n  }\n  return {\n    newRatingPoints,\n    usersRatedCount\n  };\n};","map":{"version":3,"names":["addDoc","collection","getDocs","orderBy","query","serverTimestamp","arrayUnion","doc","getDoc","updateDoc","arrayRemove","setDoc","FieldValue","increment","deleteField","firestore","movieCollection","seriesCollection","addNewShow","type","showData","collectionType","rating","ratingPoints","usersRated","createdAt","err","console","error","alert","message","editShow","showId","showType","currentShowRef","result","merge","log","getAll","orderedQuery","then","docs","arr","forEach","fields","data","push","id","getOne","showRef","addToWishList","userId","currentUserRef","watchlist","removeFromWatchlist","getAllFromWatchlist","userWatchlist","handleRating","action","ratePoints","usersRatedCount","oldRatingPoints","userHasRated","currentUserRating","newRatingPoints"],"sources":["C:/Users/User/Desktop/Final PRoject -LMDb/lmdb/src/services/showsService.js"],"sourcesContent":["import { addDoc, collection, getDocs, orderBy, query, serverTimestamp, arrayUnion, doc, getDoc, updateDoc, arrayRemove, setDoc, FieldValue, increment, deleteField } from \"firebase/firestore\";\r\nimport { firestore } from \"../firebase_setup/firebase\";\r\n\r\n\r\nconst movieCollection = collection(firestore, \"movies\");\r\nconst seriesCollection = collection(firestore, \"series\");\r\n\r\n\r\nexport const addNewShow = async (type, showData) => {\r\n    let collectionType = type === 'Movie' ? movieCollection : seriesCollection;\r\n    try {\r\n        await addDoc(collectionType, {\r\n            ...showData,\r\n            rating: {\r\n                ratingPoints: 0,\r\n                usersRated: []\r\n            },\r\n            createdAt: serverTimestamp()\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        alert(err.message);\r\n    }\r\n};\r\n\r\nexport const editShow = async (type, showId, showData) => {\r\n    let showType = '';\r\n    if (type === 'Movie') {\r\n        showType = 'movies'\r\n    } else if (type === 'Series') {\r\n        showType = 'series'\r\n    }\r\n    const currentShowRef = doc(firestore, showType, showId);\r\n    try {\r\n\r\n        const result = await updateDoc(currentShowRef, {\r\n            ...showData\r\n        }, { merge: true });\r\n        console.log(result);\r\n        return result;\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        alert(err.message);\r\n    }\r\n}\r\n\r\nexport const getAll = async (type) => {\r\n    let collectionType = type === 'Movie' ? movieCollection : seriesCollection;\r\n\r\n    const orderedQuery = query(collectionType, orderBy('createdAt', 'desc'));\r\n    try {\r\n        const result = await getDocs(orderedQuery)\r\n            .then(docs => {\r\n                let arr = [];\r\n\r\n                docs.forEach((doc) => {\r\n                    let fields = doc.data();\r\n\r\n                    arr.push({\r\n                        id: doc.id,\r\n                        fields: fields\r\n                    });\r\n                });\r\n                return arr;\r\n            });\r\n        // console.log(result);\r\n        return result;\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        alert(err.message);\r\n    }\r\n};\r\n\r\nexport const getOne = async (showId, type) => {\r\n    let showType = '';\r\n    if (type === 'Movie') {\r\n        showType = 'movies'\r\n    } else if (type === 'Series') {\r\n        showType = 'series'\r\n    }\r\n    const showRef = doc(firestore, showType, showId);\r\n    try {\r\n        const result = await getDoc(showRef);\r\n        const id = result.id;\r\n        const fields = result.data();\r\n        return { id, fields };\r\n    } catch (err) {\r\n        console.error(err);\r\n        alert(err.message);\r\n    }\r\n};\r\n\r\n\r\nexport const addToWishList = async (type, userId, showId) => {\r\n    const currentUserRef = doc(firestore, 'users', userId);\r\n\r\n    await updateDoc(currentUserRef, {\r\n        watchlist: arrayUnion({ showId, type })\r\n    });\r\n};\r\n\r\nexport const removeFromWatchlist = async (type, userId, showId) => {\r\n    const currentUserRef = doc(firestore, 'users', userId);\r\n    await updateDoc(currentUserRef, {\r\n        watchlist: arrayRemove({ showId, type })\r\n    });\r\n};\r\n\r\nexport const getAllFromWatchlist = async (userId) => {\r\n    const currentUserRef = collection(firestore, 'users');\r\n    try {\r\n        const result = await getDoc(doc(currentUserRef, userId))\r\n        // .then(doc => doc.data().watchlist);\r\n        const userWatchlist = result.data().watchlist;\r\n        return userWatchlist;\r\n    } catch (err) {\r\n        console.error(err);\r\n        alert(err.message);\r\n    }\r\n\r\n};\r\n\r\n\r\nexport const handleRating = async (action, type, userId, showId, ratePoints, usersRatedCount, oldRatingPoints, userHasRated, currentUserRating) => {\r\n    let showType = '';\r\n    if (type === 'Movie') {\r\n        showType = 'movies'\r\n    } else if (type === 'Series') {\r\n        showType = 'series'\r\n    }\r\n    const currentShowRef = doc(firestore, showType, showId);\r\n    // const result = await getDoc(currentShowRef);\r\n    // const fields = result.data();\r\n    // const oldRatingPoints = fields.rating.ratingPoints;\r\n    // let usersRatedCount = Object.keys(fields.rating.usersRated).length;\r\n    // const currentUserRating = fields.rating.usersRated[userId];\r\n    let newRatingPoints = 0;\r\n\r\n    if (action === 'send') {\r\n        if (userHasRated) {\r\n\r\n            newRatingPoints = ((oldRatingPoints * usersRatedCount) - currentUserRating + ratePoints) / usersRatedCount;\r\n        } else {\r\n            newRatingPoints = ((oldRatingPoints * usersRatedCount) + ratePoints) / (usersRatedCount + 1);\r\n            usersRatedCount++;\r\n        }\r\n\r\n        await setDoc(currentShowRef, { rating: { usersRated: { [userId]: ratePoints }, ratingPoints: newRatingPoints } }, { merge: true });\r\n\r\n    } else if (action === 'remove') {\r\n        console.log(newRatingPoints);\r\n        newRatingPoints = ((oldRatingPoints * usersRatedCount) - currentUserRating) / (usersRatedCount - 1) || 0;\r\n        usersRatedCount--;\r\n\r\n        await setDoc(currentShowRef, { rating: { usersRated: { [userId]: deleteField() }, ratingPoints: newRatingPoints } }, { merge: true });\r\n    }\r\n    return {newRatingPoints, usersRatedCount};\r\n};\r\n\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,eAAe,EAAEC,UAAU,EAAEC,GAAG,EAAEC,MAAM,EAAEC,SAAS,EAAEC,WAAW,EAAEC,MAAM,EAAEC,UAAU,EAAEC,SAAS,EAAEC,WAAW,QAAQ,oBAAoB;AAC9L,SAASC,SAAS,QAAQ,4BAA4B;AAGtD,MAAMC,eAAe,GAAGf,UAAU,CAACc,SAAS,EAAE,QAAQ,CAAC;AACvD,MAAME,gBAAgB,GAAGhB,UAAU,CAACc,SAAS,EAAE,QAAQ,CAAC;AAGxD,OAAO,MAAMG,UAAU,GAAG,MAAAA,CAAOC,IAAI,EAAEC,QAAQ,KAAK;EAChD,IAAIC,cAAc,GAAGF,IAAI,KAAK,OAAO,GAAGH,eAAe,GAAGC,gBAAgB;EAC1E,IAAI;IACA,MAAMjB,MAAM,CAACqB,cAAc,EAAE;MACzB,GAAGD,QAAQ;MACXE,MAAM,EAAE;QACJC,YAAY,EAAE,CAAC;QACfC,UAAU,EAAE;MAChB,CAAC;MACDC,SAAS,EAAEpB,eAAe;IAC9B,CAAC,CAAC;EACN,CAAC,CAAC,OAAOqB,GAAG,EAAE;IACVC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClBG,KAAK,CAACH,GAAG,CAACI,OAAO,CAAC;EACtB;AACJ,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOZ,IAAI,EAAEa,MAAM,EAAEZ,QAAQ,KAAK;EACtD,IAAIa,QAAQ,GAAG,EAAE;EACjB,IAAId,IAAI,KAAK,OAAO,EAAE;IAClBc,QAAQ,GAAG,QAAQ;EACvB,CAAC,MAAM,IAAId,IAAI,KAAK,QAAQ,EAAE;IAC1Bc,QAAQ,GAAG,QAAQ;EACvB;EACA,MAAMC,cAAc,GAAG3B,GAAG,CAACQ,SAAS,EAAEkB,QAAQ,EAAED,MAAM,CAAC;EACvD,IAAI;IAEA,MAAMG,MAAM,GAAG,MAAM1B,SAAS,CAACyB,cAAc,EAAE;MAC3C,GAAGd;IACP,CAAC,EAAE;MAAEgB,KAAK,EAAE;IAAK,CAAC,CAAC;IACnBT,OAAO,CAACU,GAAG,CAACF,MAAM,CAAC;IACnB,OAAOA,MAAM;EAEjB,CAAC,CAAC,OAAOT,GAAG,EAAE;IACVC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClBG,KAAK,CAACH,GAAG,CAACI,OAAO,CAAC;EACtB;AACJ,CAAC;AAED,OAAO,MAAMQ,MAAM,GAAG,MAAOnB,IAAI,IAAK;EAClC,IAAIE,cAAc,GAAGF,IAAI,KAAK,OAAO,GAAGH,eAAe,GAAGC,gBAAgB;EAE1E,MAAMsB,YAAY,GAAGnC,KAAK,CAACiB,cAAc,EAAElB,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;EACxE,IAAI;IACA,MAAMgC,MAAM,GAAG,MAAMjC,OAAO,CAACqC,YAAY,CAAC,CACrCC,IAAI,CAACC,IAAI,IAAI;MACV,IAAIC,GAAG,GAAG,EAAE;MAEZD,IAAI,CAACE,OAAO,CAAEpC,GAAG,IAAK;QAClB,IAAIqC,MAAM,GAAGrC,GAAG,CAACsC,IAAI,EAAE;QAEvBH,GAAG,CAACI,IAAI,CAAC;UACLC,EAAE,EAAExC,GAAG,CAACwC,EAAE;UACVH,MAAM,EAAEA;QACZ,CAAC,CAAC;MACN,CAAC,CAAC;MACF,OAAOF,GAAG;IACd,CAAC,CAAC;IACN;IACA,OAAOP,MAAM;EAEjB,CAAC,CAAC,OAAOT,GAAG,EAAE;IACVC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClBG,KAAK,CAACH,GAAG,CAACI,OAAO,CAAC;EACtB;AACJ,CAAC;AAED,OAAO,MAAMkB,MAAM,GAAG,MAAAA,CAAOhB,MAAM,EAAEb,IAAI,KAAK;EAC1C,IAAIc,QAAQ,GAAG,EAAE;EACjB,IAAId,IAAI,KAAK,OAAO,EAAE;IAClBc,QAAQ,GAAG,QAAQ;EACvB,CAAC,MAAM,IAAId,IAAI,KAAK,QAAQ,EAAE;IAC1Bc,QAAQ,GAAG,QAAQ;EACvB;EACA,MAAMgB,OAAO,GAAG1C,GAAG,CAACQ,SAAS,EAAEkB,QAAQ,EAAED,MAAM,CAAC;EAChD,IAAI;IACA,MAAMG,MAAM,GAAG,MAAM3B,MAAM,CAACyC,OAAO,CAAC;IACpC,MAAMF,EAAE,GAAGZ,MAAM,CAACY,EAAE;IACpB,MAAMH,MAAM,GAAGT,MAAM,CAACU,IAAI,EAAE;IAC5B,OAAO;MAAEE,EAAE;MAAEH;IAAO,CAAC;EACzB,CAAC,CAAC,OAAOlB,GAAG,EAAE;IACVC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClBG,KAAK,CAACH,GAAG,CAACI,OAAO,CAAC;EACtB;AACJ,CAAC;AAGD,OAAO,MAAMoB,aAAa,GAAG,MAAAA,CAAO/B,IAAI,EAAEgC,MAAM,EAAEnB,MAAM,KAAK;EACzD,MAAMoB,cAAc,GAAG7C,GAAG,CAACQ,SAAS,EAAE,OAAO,EAAEoC,MAAM,CAAC;EAEtD,MAAM1C,SAAS,CAAC2C,cAAc,EAAE;IAC5BC,SAAS,EAAE/C,UAAU,CAAC;MAAE0B,MAAM;MAAEb;IAAK,CAAC;EAC1C,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMmC,mBAAmB,GAAG,MAAAA,CAAOnC,IAAI,EAAEgC,MAAM,EAAEnB,MAAM,KAAK;EAC/D,MAAMoB,cAAc,GAAG7C,GAAG,CAACQ,SAAS,EAAE,OAAO,EAAEoC,MAAM,CAAC;EACtD,MAAM1C,SAAS,CAAC2C,cAAc,EAAE;IAC5BC,SAAS,EAAE3C,WAAW,CAAC;MAAEsB,MAAM;MAAEb;IAAK,CAAC;EAC3C,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMoC,mBAAmB,GAAG,MAAOJ,MAAM,IAAK;EACjD,MAAMC,cAAc,GAAGnD,UAAU,CAACc,SAAS,EAAE,OAAO,CAAC;EACrD,IAAI;IACA,MAAMoB,MAAM,GAAG,MAAM3B,MAAM,CAACD,GAAG,CAAC6C,cAAc,EAAED,MAAM,CAAC,CAAC;IACxD;IACA,MAAMK,aAAa,GAAGrB,MAAM,CAACU,IAAI,EAAE,CAACQ,SAAS;IAC7C,OAAOG,aAAa;EACxB,CAAC,CAAC,OAAO9B,GAAG,EAAE;IACVC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClBG,KAAK,CAACH,GAAG,CAACI,OAAO,CAAC;EACtB;AAEJ,CAAC;AAGD,OAAO,MAAM2B,YAAY,GAAG,MAAAA,CAAOC,MAAM,EAAEvC,IAAI,EAAEgC,MAAM,EAAEnB,MAAM,EAAE2B,UAAU,EAAEC,eAAe,EAAEC,eAAe,EAAEC,YAAY,EAAEC,iBAAiB,KAAK;EAC/I,IAAI9B,QAAQ,GAAG,EAAE;EACjB,IAAId,IAAI,KAAK,OAAO,EAAE;IAClBc,QAAQ,GAAG,QAAQ;EACvB,CAAC,MAAM,IAAId,IAAI,KAAK,QAAQ,EAAE;IAC1Bc,QAAQ,GAAG,QAAQ;EACvB;EACA,MAAMC,cAAc,GAAG3B,GAAG,CAACQ,SAAS,EAAEkB,QAAQ,EAAED,MAAM,CAAC;EACvD;EACA;EACA;EACA;EACA;EACA,IAAIgC,eAAe,GAAG,CAAC;EAEvB,IAAIN,MAAM,KAAK,MAAM,EAAE;IACnB,IAAII,YAAY,EAAE;MAEdE,eAAe,GAAG,CAAEH,eAAe,GAAGD,eAAe,GAAIG,iBAAiB,GAAGJ,UAAU,IAAIC,eAAe;IAC9G,CAAC,MAAM;MACHI,eAAe,GAAG,CAAEH,eAAe,GAAGD,eAAe,GAAID,UAAU,KAAKC,eAAe,GAAG,CAAC,CAAC;MAC5FA,eAAe,EAAE;IACrB;IAEA,MAAMjD,MAAM,CAACuB,cAAc,EAAE;MAAEZ,MAAM,EAAE;QAAEE,UAAU,EAAE;UAAE,CAAC2B,MAAM,GAAGQ;QAAW,CAAC;QAAEpC,YAAY,EAAEyC;MAAgB;IAAE,CAAC,EAAE;MAAE5B,KAAK,EAAE;IAAK,CAAC,CAAC;EAEtI,CAAC,MAAM,IAAIsB,MAAM,KAAK,QAAQ,EAAE;IAC5B/B,OAAO,CAACU,GAAG,CAAC2B,eAAe,CAAC;IAC5BA,eAAe,GAAG,CAAEH,eAAe,GAAGD,eAAe,GAAIG,iBAAiB,KAAKH,eAAe,GAAG,CAAC,CAAC,IAAI,CAAC;IACxGA,eAAe,EAAE;IAEjB,MAAMjD,MAAM,CAACuB,cAAc,EAAE;MAAEZ,MAAM,EAAE;QAAEE,UAAU,EAAE;UAAE,CAAC2B,MAAM,GAAGrC,WAAW;QAAG,CAAC;QAAES,YAAY,EAAEyC;MAAgB;IAAE,CAAC,EAAE;MAAE5B,KAAK,EAAE;IAAK,CAAC,CAAC;EACzI;EACA,OAAO;IAAC4B,eAAe;IAAEJ;EAAe,CAAC;AAC7C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}