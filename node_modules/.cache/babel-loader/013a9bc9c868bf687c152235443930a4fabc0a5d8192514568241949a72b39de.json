{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Final PRoject -LMDb\\\\lmdb\\\\src\\\\contexts\\\\ShowsConext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { getAll, getAllFromWatchlist } from \"../services/showsService\";\nimport { useAuthContext } from \"./AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShowsContext = /*#__PURE__*/createContext();\nexport const useShowsContext = () => {\n  _s();\n  return useContext(ShowsContext);\n};\n_s(useShowsContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ShowsProvider = _ref => {\n  _s2();\n  let {\n    children\n  } = _ref;\n  const [moviesList, setMoviesList] = useState([]);\n  const [seriesList, setSeriesList] = useState([]);\n  const [watchlist, setWatchlist] = useState([]);\n  useEffect(() => {\n    getAll('Movie').then(docs => {\n      docs.forEach(doc => {\n        // arr.push({\n        //     id: doc.id,\n        //     fields: doc.fields\n        // });\n        setMoviesList(state => [...state, {\n          id: doc.id,\n          fields: doc.fields\n        }]);\n      });\n      // setMoviesList(arr);\n    });\n\n    getAll('Series').then(docs => {\n      docs.forEach(doc => {\n        // arr.push({\n        //     id: doc.id,\n        //     fields: doc.fields\n        // });\n        setSeriesList(state => [...state, {\n          id: doc.id,\n          fields: doc.fields\n        }]);\n      });\n      // setMoviesList(arr);\n    });\n\n    getAllFromWatchlist(currentUser.uid).then(result => {\n      console.log(result);\n      setWatchlist(result);\n    });\n  }, [currentUser]);\n  return /*#__PURE__*/_jsxDEV(ShowsContext.Provider, {\n    value: {\n      moviesList,\n      seriesList,\n      watchlist\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 12\n  }, this);\n};\n_s2(ShowsProvider, \"Fhn0YnoQvqfKlsh/W+JYFLEzj6c=\");\n_c = ShowsProvider;\nvar _c;\n$RefreshReg$(_c, \"ShowsProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","getAll","getAllFromWatchlist","useAuthContext","jsxDEV","_jsxDEV","ShowsContext","useShowsContext","_s","ShowsProvider","_ref","_s2","children","moviesList","setMoviesList","seriesList","setSeriesList","watchlist","setWatchlist","then","docs","forEach","doc","state","id","fields","currentUser","uid","result","console","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/Final PRoject -LMDb/lmdb/src/contexts/ShowsConext.js"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { getAll, getAllFromWatchlist } from \"../services/showsService\";\r\nimport { useAuthContext } from \"./AuthContext\";\r\n\r\nconst ShowsContext = createContext();\r\nexport const useShowsContext = () => useContext(ShowsContext);\r\nexport const ShowsProvider = ({ children }) => {\r\n    const [moviesList, setMoviesList] = useState([]);\r\n    const [seriesList, setSeriesList] = useState([]);\r\n    const [watchlist, setWatchlist] = useState([]);\r\n    useEffect(() => {\r\n\r\n        getAll('Movie')\r\n        .then(docs => {\r\n                docs.forEach((doc) => {\r\n                    // arr.push({\r\n                    //     id: doc.id,\r\n                    //     fields: doc.fields\r\n                    // });\r\n                    setMoviesList(state => [...state, {id: doc.id, fields: doc.fields}]);\r\n                });\r\n                // setMoviesList(arr);\r\n        });\r\n        getAll('Series')\r\n        .then(docs => {\r\n                docs.forEach((doc) => {\r\n                    // arr.push({\r\n                    //     id: doc.id,\r\n                    //     fields: doc.fields\r\n                    // });\r\n                    setSeriesList(state => [...state, {id: doc.id, fields: doc.fields}]);\r\n                });\r\n                // setMoviesList(arr);\r\n        });\r\n        getAllFromWatchlist(currentUser.uid)\r\n        .then(result => {\r\n            console.log(result);\r\n            setWatchlist(result);\r\n        })\r\n    }, [currentUser]);\r\n\r\n    return <ShowsContext.Provider value={{moviesList, seriesList, watchlist}}>\r\n        {children}\r\n    </ShowsContext.Provider>\r\n};"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACtE,SAASC,MAAM,EAAEC,mBAAmB,QAAQ,0BAA0B;AACtE,SAASC,cAAc,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,YAAY,gBAAGT,aAAa,EAAE;AACpC,OAAO,MAAMU,eAAe,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMV,UAAU,CAACQ,YAAY,CAAC;AAAA;AAACE,EAAA,CAAjDD,eAAe;AAC5B,OAAO,MAAME,aAAa,GAAGC,IAAA,IAAkB;EAAAC,GAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACtC,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACe,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC9CD,SAAS,CAAC,MAAM;IAEZE,MAAM,CAAC,OAAO,CAAC,CACdkB,IAAI,CAACC,IAAI,IAAI;MACNA,IAAI,CAACC,OAAO,CAAEC,GAAG,IAAK;QAClB;QACA;QACA;QACA;QACAR,aAAa,CAACS,KAAK,IAAI,CAAC,GAAGA,KAAK,EAAE;UAACC,EAAE,EAAEF,GAAG,CAACE,EAAE;UAAEC,MAAM,EAAEH,GAAG,CAACG;QAAM,CAAC,CAAC,CAAC;MACxE,CAAC,CAAC;MACF;IACR,CAAC,CAAC;;IACFxB,MAAM,CAAC,QAAQ,CAAC,CACfkB,IAAI,CAACC,IAAI,IAAI;MACNA,IAAI,CAACC,OAAO,CAAEC,GAAG,IAAK;QAClB;QACA;QACA;QACA;QACAN,aAAa,CAACO,KAAK,IAAI,CAAC,GAAGA,KAAK,EAAE;UAACC,EAAE,EAAEF,GAAG,CAACE,EAAE;UAAEC,MAAM,EAAEH,GAAG,CAACG;QAAM,CAAC,CAAC,CAAC;MACxE,CAAC,CAAC;MACF;IACR,CAAC,CAAC;;IACFvB,mBAAmB,CAACwB,WAAW,CAACC,GAAG,CAAC,CACnCR,IAAI,CAACS,MAAM,IAAI;MACZC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;MACnBV,YAAY,CAACU,MAAM,CAAC;IACxB,CAAC,CAAC;EACN,CAAC,EAAE,CAACF,WAAW,CAAC,CAAC;EAEjB,oBAAOrB,OAAA,CAACC,YAAY,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAACnB,UAAU;MAAEE,UAAU;MAAEE;IAAS,CAAE;IAAAL,QAAA,EACpEA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACW;AAC5B,CAAC;AAACzB,GAAA,CAtCWF,aAAa;AAAA4B,EAAA,GAAb5B,aAAa;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}