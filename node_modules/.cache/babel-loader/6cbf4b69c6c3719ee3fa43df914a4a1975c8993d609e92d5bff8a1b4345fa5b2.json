{"ast":null,"code":"import { addDoc, collection, getDocs, orderBy, query, serverTimestamp, arrayUnion, doc, getDoc, updateDoc, arrayRemove, setDoc, FieldValue, increment, deleteField } from \"firebase/firestore\";\nimport { firestore } from \"../firebase_setup/firebase\";\nconst movieCollection = collection(firestore, \"movies\");\nconst seriesCollection = collection(firestore, \"series\");\nexport const addNewShow = async (type, showData) => {\n  let collectionType = type === 'Movie' ? movieCollection : seriesCollection;\n  try {\n    await addDoc(collectionType, {\n      ...showData,\n      rating: {\n        ratingPoints: 0,\n        usersRated: []\n      },\n      createdAt: serverTimestamp()\n    });\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nexport const getAll = async type => {\n  let collectionType = type === 'Movie' ? movieCollection : seriesCollection;\n  const orderedQuery = query(collectionType, orderBy('createdAt', 'desc'));\n  try {\n    const result = await getDocs(orderedQuery).then(docs => {\n      let arr = [];\n      docs.forEach(doc => {\n        let fields = doc.data();\n        arr.push({\n          id: doc.id,\n          fields: fields\n        });\n      });\n      return arr;\n    });\n    // console.log(result);\n    return result;\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nexport const getOne = async (showId, type) => {\n  let showType = '';\n  if (type === 'Movie') {\n    showType = 'movies';\n  } else if (type === 'Series') {\n    showType = 'series';\n  }\n  const showRef = doc(firestore, showType, showId);\n  try {\n    const result = await getDoc(showRef);\n    const id = result.id;\n    const fields = result.data();\n    return {\n      id,\n      fields\n    };\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nexport const addToWishList = async (type, userId, showId) => {\n  const currentUserRef = doc(firestore, 'users', userId);\n  await updateDoc(currentUserRef, {\n    watchlist: arrayUnion({\n      showId,\n      type\n    })\n  });\n};\nexport const removeFromWatchlist = async (type, userId, showId) => {\n  const currentUserRef = doc(firestore, 'users', userId);\n  await updateDoc(currentUserRef, {\n    watchlist: arrayRemove({\n      showId,\n      type\n    })\n  });\n};\nexport const getAllFromWatchlist = async userId => {\n  const currentUserRef = collection(firestore, 'users');\n  try {\n    const result = await getDoc(doc(currentUserRef, userId));\n    // .then(doc => doc.data().watchlist);\n    const userWatchlist = result.data().watchlist;\n    return userWatchlist;\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nexport const handleRating = async (action, type, userId, showId, ratePoints) => {\n  let showType = '';\n  if (type === 'Movie') {\n    showType = 'movies';\n  } else if (type === 'Series') {\n    showType = 'series';\n  }\n  const currentShowRef = doc(firestore, showType, showId);\n  const result = await getDoc(currentShowRef);\n  const fields = result.data();\n  const oldRatingPoints = fields.rating.ratingPoints;\n  let newRatingPoints = 0;\n  const usersRatedCount = Object.keys(fields.rating.usersRated).length;\n  const currentUserRating = fields.rating.usersRated[userId];\n  if (action === 'send') {\n    if (fields.rating.usersRated.hasOwnProperty(userId)) {\n      newRatingPoints = (oldRatingPoints * usersRatedCount - currentUserRating + ratePoints) / usersRatedCount;\n    } else {\n      newRatingPoints = (oldRatingPoints * usersRatedCount + ratePoints) / (usersRatedCount + 1);\n    }\n    await setDoc(currentShowRef, {\n      rating: {\n        usersRated: {\n          [userId]: ratePoints\n        },\n        ratingPoints: newRatingPoints\n      }\n    }, {\n      merge: true\n    });\n  } else if (action === 'remove') {\n    console.log('da');\n    newRatingPoints = (oldRatingPoints * usersRatedCount - currentUserRating) / usersRatedCount - 1;\n    await setDoc(currentShowRef, {\n      rating: {\n        usersRated: {\n          [userId]: deleteField()\n        },\n        ratingPoints: newRatingPoints\n      }\n    }, {\n      merge: true\n    });\n  }\n  return newRatingPoints;\n};","map":{"version":3,"names":["addDoc","collection","getDocs","orderBy","query","serverTimestamp","arrayUnion","doc","getDoc","updateDoc","arrayRemove","setDoc","FieldValue","increment","deleteField","firestore","movieCollection","seriesCollection","addNewShow","type","showData","collectionType","rating","ratingPoints","usersRated","createdAt","err","console","error","alert","message","getAll","orderedQuery","result","then","docs","arr","forEach","fields","data","push","id","getOne","showId","showType","showRef","addToWishList","userId","currentUserRef","watchlist","removeFromWatchlist","getAllFromWatchlist","userWatchlist","handleRating","action","ratePoints","currentShowRef","oldRatingPoints","newRatingPoints","usersRatedCount","Object","keys","length","currentUserRating","hasOwnProperty","merge","log"],"sources":["C:/Users/User/Desktop/Final PRoject -LMDb/lmdb/src/services/showsService.js"],"sourcesContent":["import { addDoc, collection, getDocs, orderBy, query, serverTimestamp, arrayUnion, doc, getDoc, updateDoc, arrayRemove, setDoc, FieldValue, increment, deleteField } from \"firebase/firestore\";\r\nimport { firestore } from \"../firebase_setup/firebase\";\r\n\r\n\r\nconst movieCollection = collection(firestore, \"movies\");\r\nconst seriesCollection = collection(firestore, \"series\");\r\n\r\n\r\nexport const addNewShow = async (type, showData) => {\r\n    let collectionType = type === 'Movie' ? movieCollection : seriesCollection;\r\n    try {\r\n        await addDoc(collectionType, {\r\n            ...showData,\r\n            rating: {\r\n                ratingPoints: 0,\r\n                usersRated: []\r\n            },\r\n            createdAt: serverTimestamp()\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        alert(err.message);\r\n    }\r\n};\r\n\r\nexport const getAll = async (type) => {\r\n    let collectionType = type === 'Movie' ? movieCollection : seriesCollection;\r\n\r\n    const orderedQuery = query(collectionType, orderBy('createdAt', 'desc'));\r\n    try {\r\n        const result = await getDocs(orderedQuery)\r\n            .then(docs => {\r\n                let arr = [];\r\n\r\n                docs.forEach((doc) => {\r\n                    let fields = doc.data();\r\n\r\n                    arr.push({\r\n                        id: doc.id,\r\n                        fields: fields\r\n                    });\r\n                });\r\n                return arr;\r\n            });\r\n        // console.log(result);\r\n        return result;\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        alert(err.message);\r\n    }\r\n};\r\n\r\nexport const getOne = async (showId, type) => {\r\n    let showType = '';\r\n    if (type === 'Movie') {\r\n        showType = 'movies'\r\n    } else if (type === 'Series') {\r\n        showType = 'series'\r\n    }\r\n    const showRef = doc(firestore, showType, showId);\r\n    try {\r\n        const result = await getDoc(showRef);\r\n        const id = result.id;\r\n        const fields = result.data();\r\n        return { id, fields };\r\n    } catch (err) {\r\n        console.error(err);\r\n        alert(err.message);\r\n    }\r\n};\r\n\r\n\r\nexport const addToWishList = async (type, userId, showId) => {\r\n    const currentUserRef = doc(firestore, 'users', userId);\r\n\r\n    await updateDoc(currentUserRef, {\r\n        watchlist: arrayUnion({ showId, type })\r\n    });\r\n};\r\n\r\nexport const removeFromWatchlist = async (type, userId, showId) => {\r\n    const currentUserRef = doc(firestore, 'users', userId);\r\n    await updateDoc(currentUserRef, {\r\n        watchlist: arrayRemove({ showId, type })\r\n    });\r\n};\r\n\r\nexport const getAllFromWatchlist = async (userId) => {\r\n    const currentUserRef = collection(firestore, 'users');\r\n    try {\r\n        const result = await getDoc(doc(currentUserRef, userId))\r\n        // .then(doc => doc.data().watchlist);\r\n        const userWatchlist = result.data().watchlist;\r\n        return userWatchlist;\r\n    } catch (err) {\r\n        console.error(err);\r\n        alert(err.message);\r\n    }\r\n\r\n};\r\n\r\n\r\nexport const handleRating = async (action, type, userId, showId, ratePoints) => {\r\n    let showType = '';\r\n    if (type === 'Movie') {\r\n        showType = 'movies'\r\n    } else if (type === 'Series') {\r\n        showType = 'series'\r\n    }\r\n    const currentShowRef = doc(firestore, showType, showId);\r\n    const result = await getDoc(currentShowRef);\r\n    const fields = result.data();\r\n    const oldRatingPoints = fields.rating.ratingPoints;\r\n    let newRatingPoints = 0;\r\n    const usersRatedCount = Object.keys(fields.rating.usersRated).length;\r\n    const currentUserRating = fields.rating.usersRated[userId];\r\n\r\n    if (action === 'send') {\r\n\r\n        if (fields.rating.usersRated.hasOwnProperty(userId)) {\r\n\r\n            newRatingPoints = ((oldRatingPoints * usersRatedCount) - currentUserRating + ratePoints) / usersRatedCount;\r\n        } else {\r\n            newRatingPoints = ((oldRatingPoints * usersRatedCount) + ratePoints) / (usersRatedCount + 1);\r\n        }\r\n\r\n        await setDoc(currentShowRef, { rating: { usersRated: { [userId]: ratePoints }, ratingPoints: newRatingPoints } }, { merge: true });\r\n\r\n    } else if (action === 'remove') {\r\n        console.log('da');\r\n        newRatingPoints = ((oldRatingPoints * usersRatedCount) - currentUserRating) / usersRatedCount - 1;\r\n        await setDoc(currentShowRef, { rating: { usersRated: { [userId]: deleteField() }, ratingPoints: newRatingPoints } }, { merge: true });\r\n    }\r\n    return newRatingPoints;\r\n};\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}