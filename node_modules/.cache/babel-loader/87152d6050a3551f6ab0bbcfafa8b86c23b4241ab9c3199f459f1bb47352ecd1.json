{"ast":null,"code":"import { addDoc, arrayRemove, collection, deleteField, doc, getDocs, orderBy, query, serverTimestamp, setDoc, updateDoc, where } from \"firebase/firestore\";\nimport { firestore } from \"../firebase_setup/firebase\";\nimport { getUserAdditionalData } from \"./authService\";\nconst commentCollection = collection(firestore, 'comments');\nexport const postComment = async (showId, ownerId, commentContent) => {\n  const owner = await getUserAdditionalData(ownerId);\n  try {\n    return await addDoc(commentCollection, {\n      showId,\n      commentContent,\n      likes: [],\n      dislikes: [],\n      ownerId,\n      ownerName: owner.name,\n      createdAt: serverTimestamp()\n    });\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nexport const getAllComments = async showId => {\n  const orderedQuery = query(commentCollection, orderBy('createdAt', 'asc'), where('showId', '==', showId));\n  try {\n    const result = await getDocs(orderedQuery).then(docs => {\n      let arr = [];\n      docs.forEach(doc => {\n        let fields = doc.data();\n        arr.push({\n          id: doc.id,\n          fields: fields\n        });\n      });\n      return arr;\n    });\n    // console.log(result);\n    return result;\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nexport const sendReaction = async (reaction, commentId, userId) => {\n  const currentCommentRef = doc(firestore, 'comments', commentId);\n  if (reaction === 'like') {\n    await setDoc(currentCommentRef, {\n      likes: [userId]\n    }, {\n      merge: true\n    });\n  } else {\n    await setDoc(currentCommentRef, {\n      dislikes: [userId]\n    }, {\n      merge: true\n    });\n  }\n};\nexport const removeReaction = async (reaction, commentId, userId) => {\n  const currentCommentRef = doc(firestore, 'comments', commentId);\n  if (reaction === 'like') {\n    await updateDoc(currentCommentRef, {\n      likes: arrayRemove(userId)\n    });\n  } else {\n    await updateDoc(currentCommentRef, {\n      dislikes: arrayRemove(userId)\n    });\n  }\n};","map":{"version":3,"names":["addDoc","arrayRemove","collection","deleteField","doc","getDocs","orderBy","query","serverTimestamp","setDoc","updateDoc","where","firestore","getUserAdditionalData","commentCollection","postComment","showId","ownerId","commentContent","owner","likes","dislikes","ownerName","name","createdAt","err","console","error","alert","message","getAllComments","orderedQuery","result","then","docs","arr","forEach","fields","data","push","id","sendReaction","reaction","commentId","userId","currentCommentRef","merge","removeReaction"],"sources":["C:/Users/User/Desktop/Final PRoject -LMDb/lmdb/src/services/commentsService.js"],"sourcesContent":["import { addDoc, arrayRemove, collection, deleteField, doc, getDocs, orderBy, query, serverTimestamp, setDoc, updateDoc, where } from \"firebase/firestore\";\r\nimport { firestore } from \"../firebase_setup/firebase\";\r\nimport { getUserAdditionalData } from \"./authService\"\r\n\r\nconst commentCollection = collection(firestore, 'comments');\r\n\r\nexport const postComment = async (showId, ownerId, commentContent) => {\r\n    \r\n    const owner = await getUserAdditionalData(ownerId);\r\n    try {\r\n        return await addDoc(commentCollection, {\r\n            showId,\r\n            commentContent,\r\n            likes: [],\r\n            dislikes: [],\r\n            ownerId,\r\n            ownerName: owner.name,\r\n            createdAt: serverTimestamp()\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        alert(err.message);\r\n    }\r\n};\r\n\r\nexport const getAllComments = async (showId) => {\r\n    const orderedQuery = query(commentCollection, orderBy('createdAt', 'asc'), where ('showId', '==', showId));\r\n    try {\r\n        const result = await getDocs(orderedQuery)\r\n            .then(docs => {\r\n                let arr = [];\r\n\r\n                docs.forEach((doc) => {\r\n                    let fields = doc.data();\r\n\r\n                    arr.push({\r\n                        id: doc.id,\r\n                        fields: fields\r\n                    });\r\n                });\r\n                return arr;\r\n            });\r\n        // console.log(result);\r\n        return result;\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        alert(err.message);\r\n    }\r\n};\r\n\r\nexport const sendReaction = async (reaction, commentId, userId) => {\r\n  \r\n    const currentCommentRef = doc(firestore, 'comments', commentId);\r\n   \r\n    if(reaction === 'like') {\r\n        await setDoc(currentCommentRef, { likes: [userId]}, { merge: true });\r\n    } else {\r\n        await setDoc(currentCommentRef, { dislikes: [userId]}, { merge: true });\r\n\r\n    }\r\n    \r\n}\r\n\r\nexport const removeReaction = async (reaction, commentId, userId) => {\r\n  \r\n    const currentCommentRef = doc(firestore, 'comments', commentId);\r\n   \r\n    if(reaction === 'like') {\r\n        await updateDoc(currentCommentRef, {\r\n            likes: arrayRemove( userId)\r\n        });\r\n    } else {\r\n        await updateDoc(currentCommentRef, {\r\n            dislikes: arrayRemove( userId)\r\n        });\r\n    }\r\n    \r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}